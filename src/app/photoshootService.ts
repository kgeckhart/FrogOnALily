/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IPhotoshootService {
    getPhotoshoots(category: PhotoshootCategory | null | undefined): Observable<Photoshoot[] | null>;
    getImagesForPhotoshoot(photoshootName: string): Observable<PhotoshootImage[] | null>;
}

@Injectable()
export class PhotoshootService implements IPhotoshootService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:53461";
    }

    getPhotoshoots(category: PhotoshootCategory | null | undefined): Observable<Photoshoot[] | null> {
        let url_ = this.baseUrl + "/api/photoshoots?";
        if (category !== undefined)
            url_ += "category=" + encodeURIComponent("" + category) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetPhotoshoots(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPhotoshoots(<any>response_);
                } catch (e) {
                    return <Observable<Photoshoot[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<Photoshoot[] | null>><any>Observable.throw(response_);
        });
    }

    protected processGetPhotoshoots(response: HttpResponseBase): Observable<Photoshoot[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Photoshoot.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<Photoshoot[] | null>(<any>null);
    }

    getImagesForPhotoshoot(photoshootName: string): Observable<PhotoshootImage[] | null> {
        let url_ = this.baseUrl + "/api/photoshoots/{photoshootName}/images";
        if (photoshootName === undefined || photoshootName === null)
            throw new Error("The parameter 'photoshootName' must be defined.");
        url_ = url_.replace("{photoshootName}", encodeURIComponent("" + photoshootName)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetImagesForPhotoshoots(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetImagesForPhotoshoots(<any>response_);
                } catch (e) {
                    return <Observable<PhotoshootImage[] | null>><any>Observable.throw(e);
                }
            } else
                return <Observable<PhotoshootImage[] | null>><any>Observable.throw(response_);
        });
    }

    protected processGetImagesForPhotoshoots(response: HttpResponseBase): Observable<PhotoshootImage[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(PhotoshootImage.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PhotoshootImage[] | null>(<any>null);
    }
}

export enum PhotoshootCategory {
    Unknown = 0, 
    Wedding = 1, 
    Engagement = 2, 
    Maternity = 3, 
    Boudoir = 4, 
    Newborn = 5, 
    Senior = 6, 
    Family = 7, 
    Birth = 8, 
}

export class Photoshoot implements IPhotoshoot {
    id: number;
    name?: string | undefined;
    category: PhotoshootCategory;
    thumbnailUri?: string | undefined;
    shootDate: Date;

    constructor(data?: IPhotoshoot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.category = data["category"];
            this.thumbnailUri = data["thumbnailUri"];
            this.shootDate = data["shootDate"] ? new Date(data["shootDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Photoshoot {
        let result = new Photoshoot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["category"] = this.category;
        data["thumbnailUri"] = this.thumbnailUri;
        data["shootDate"] = this.shootDate ? this.shootDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPhotoshoot {
    name?: string | undefined;
    category: PhotoshootCategory;
    thumbnailUri?: string | undefined;
    shootDate: Date;
}

export class PhotoshootImage implements IPhotoshootImage {
    imageNumber: number;
    imageUri?: string | undefined;
    thumbnailUri?: string | undefined;

    constructor(data?: IPhotoshootImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.imageNumber = data["imageNumber"];
            this.imageUri = data["imageUri"];
            this.thumbnailUri = data["thumbnailUri"];
        }
    }

    static fromJS(data: any): PhotoshootImage {
        let result = new PhotoshootImage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["imageNumber"] = this.imageNumber;
        data["imageUri"] = this.imageUri;
        data["thumbnailUri"] = this.thumbnailUri;
        return data; 
    }
}

export interface IPhotoshootImage {
    imageNumber: number;
    imageUri?: string | undefined;
    thumbnailUri?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return Observable.throw(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}